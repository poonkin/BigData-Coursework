/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.citibikefinal;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CitiBikeData implements org.apache.thrift.TBase<CitiBikeData, CitiBikeData._Fields>, java.io.Serializable, Cloneable, Comparable<CitiBikeData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CitiBikeData");

  private static final org.apache.thrift.protocol.TField UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unique_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRIPDURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("tripduration", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STARTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("starttime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STOPTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stoptime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STARTSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("startstation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STARTSTATIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("startstationname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STARTSTATIONLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("startstationlat", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField STARTSTATIONLONG_FIELD_DESC = new org.apache.thrift.protocol.TField("startstationlong", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ENDSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("endstation", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ENDSTATIONNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("endstationname", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ENDSTATIONLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("endstationlat", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ENDSTATIONLONG_FIELD_DESC = new org.apache.thrift.protocol.TField("endstationlong", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField BIKEID_FIELD_DESC = new org.apache.thrift.protocol.TField("bikeid", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField USERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usertype", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BIRTHYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("birthyear", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CitiBikeDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CitiBikeDataTupleSchemeFactory());
  }

  public int unique_id; // required
  public int tripduration; // required
  public String starttime; // required
  public String stoptime; // required
  public int startstation; // required
  public String startstationname; // required
  public double startstationlat; // required
  public double startstationlong; // required
  public int endstation; // required
  public String endstationname; // required
  public double endstationlat; // required
  public double endstationlong; // required
  public int bikeid; // required
  public String usertype; // required
  public int birthyear; // required
  public int gender; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIQUE_ID((short)1, "unique_id"),
    TRIPDURATION((short)2, "tripduration"),
    STARTTIME((short)3, "starttime"),
    STOPTIME((short)4, "stoptime"),
    STARTSTATION((short)5, "startstation"),
    STARTSTATIONNAME((short)6, "startstationname"),
    STARTSTATIONLAT((short)7, "startstationlat"),
    STARTSTATIONLONG((short)8, "startstationlong"),
    ENDSTATION((short)9, "endstation"),
    ENDSTATIONNAME((short)10, "endstationname"),
    ENDSTATIONLAT((short)11, "endstationlat"),
    ENDSTATIONLONG((short)12, "endstationlong"),
    BIKEID((short)13, "bikeid"),
    USERTYPE((short)14, "usertype"),
    BIRTHYEAR((short)15, "birthyear"),
    GENDER((short)16, "gender");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIQUE_ID
          return UNIQUE_ID;
        case 2: // TRIPDURATION
          return TRIPDURATION;
        case 3: // STARTTIME
          return STARTTIME;
        case 4: // STOPTIME
          return STOPTIME;
        case 5: // STARTSTATION
          return STARTSTATION;
        case 6: // STARTSTATIONNAME
          return STARTSTATIONNAME;
        case 7: // STARTSTATIONLAT
          return STARTSTATIONLAT;
        case 8: // STARTSTATIONLONG
          return STARTSTATIONLONG;
        case 9: // ENDSTATION
          return ENDSTATION;
        case 10: // ENDSTATIONNAME
          return ENDSTATIONNAME;
        case 11: // ENDSTATIONLAT
          return ENDSTATIONLAT;
        case 12: // ENDSTATIONLONG
          return ENDSTATIONLONG;
        case 13: // BIKEID
          return BIKEID;
        case 14: // USERTYPE
          return USERTYPE;
        case 15: // BIRTHYEAR
          return BIRTHYEAR;
        case 16: // GENDER
          return GENDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNIQUE_ID_ISSET_ID = 0;
  private static final int __TRIPDURATION_ISSET_ID = 1;
  private static final int __STARTSTATION_ISSET_ID = 2;
  private static final int __STARTSTATIONLAT_ISSET_ID = 3;
  private static final int __STARTSTATIONLONG_ISSET_ID = 4;
  private static final int __ENDSTATION_ISSET_ID = 5;
  private static final int __ENDSTATIONLAT_ISSET_ID = 6;
  private static final int __ENDSTATIONLONG_ISSET_ID = 7;
  private static final int __BIKEID_ISSET_ID = 8;
  private static final int __BIRTHYEAR_ISSET_ID = 9;
  private static final int __GENDER_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("unique_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIPDURATION, new org.apache.thrift.meta_data.FieldMetaData("tripduration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTTIME, new org.apache.thrift.meta_data.FieldMetaData("starttime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOPTIME, new org.apache.thrift.meta_data.FieldMetaData("stoptime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTSTATION, new org.apache.thrift.meta_data.FieldMetaData("startstation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARTSTATIONNAME, new org.apache.thrift.meta_data.FieldMetaData("startstationname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTSTATIONLAT, new org.apache.thrift.meta_data.FieldMetaData("startstationlat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STARTSTATIONLONG, new org.apache.thrift.meta_data.FieldMetaData("startstationlong", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENDSTATION, new org.apache.thrift.meta_data.FieldMetaData("endstation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDSTATIONNAME, new org.apache.thrift.meta_data.FieldMetaData("endstationname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDSTATIONLAT, new org.apache.thrift.meta_data.FieldMetaData("endstationlat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENDSTATIONLONG, new org.apache.thrift.meta_data.FieldMetaData("endstationlong", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BIKEID, new org.apache.thrift.meta_data.FieldMetaData("bikeid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERTYPE, new org.apache.thrift.meta_data.FieldMetaData("usertype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHYEAR, new org.apache.thrift.meta_data.FieldMetaData("birthyear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CitiBikeData.class, metaDataMap);
  }

  public CitiBikeData() {
  }

  public CitiBikeData(
    int unique_id,
    int tripduration,
    String starttime,
    String stoptime,
    int startstation,
    String startstationname,
    double startstationlat,
    double startstationlong,
    int endstation,
    String endstationname,
    double endstationlat,
    double endstationlong,
    int bikeid,
    String usertype,
    int birthyear,
    int gender)
  {
    this();
    this.unique_id = unique_id;
    setUnique_idIsSet(true);
    this.tripduration = tripduration;
    setTripdurationIsSet(true);
    this.starttime = starttime;
    this.stoptime = stoptime;
    this.startstation = startstation;
    setStartstationIsSet(true);
    this.startstationname = startstationname;
    this.startstationlat = startstationlat;
    setStartstationlatIsSet(true);
    this.startstationlong = startstationlong;
    setStartstationlongIsSet(true);
    this.endstation = endstation;
    setEndstationIsSet(true);
    this.endstationname = endstationname;
    this.endstationlat = endstationlat;
    setEndstationlatIsSet(true);
    this.endstationlong = endstationlong;
    setEndstationlongIsSet(true);
    this.bikeid = bikeid;
    setBikeidIsSet(true);
    this.usertype = usertype;
    this.birthyear = birthyear;
    setBirthyearIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CitiBikeData(CitiBikeData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.unique_id = other.unique_id;
    this.tripduration = other.tripduration;
    if (other.isSetStarttime()) {
      this.starttime = other.starttime;
    }
    if (other.isSetStoptime()) {
      this.stoptime = other.stoptime;
    }
    this.startstation = other.startstation;
    if (other.isSetStartstationname()) {
      this.startstationname = other.startstationname;
    }
    this.startstationlat = other.startstationlat;
    this.startstationlong = other.startstationlong;
    this.endstation = other.endstation;
    if (other.isSetEndstationname()) {
      this.endstationname = other.endstationname;
    }
    this.endstationlat = other.endstationlat;
    this.endstationlong = other.endstationlong;
    this.bikeid = other.bikeid;
    if (other.isSetUsertype()) {
      this.usertype = other.usertype;
    }
    this.birthyear = other.birthyear;
    this.gender = other.gender;
  }

  public CitiBikeData deepCopy() {
    return new CitiBikeData(this);
  }

  @Override
  public void clear() {
    setUnique_idIsSet(false);
    this.unique_id = 0;
    setTripdurationIsSet(false);
    this.tripduration = 0;
    this.starttime = null;
    this.stoptime = null;
    setStartstationIsSet(false);
    this.startstation = 0;
    this.startstationname = null;
    setStartstationlatIsSet(false);
    this.startstationlat = 0.0;
    setStartstationlongIsSet(false);
    this.startstationlong = 0.0;
    setEndstationIsSet(false);
    this.endstation = 0;
    this.endstationname = null;
    setEndstationlatIsSet(false);
    this.endstationlat = 0.0;
    setEndstationlongIsSet(false);
    this.endstationlong = 0.0;
    setBikeidIsSet(false);
    this.bikeid = 0;
    this.usertype = null;
    setBirthyearIsSet(false);
    this.birthyear = 0;
    setGenderIsSet(false);
    this.gender = 0;
  }

  public int getUnique_id() {
    return this.unique_id;
  }

  public CitiBikeData setUnique_id(int unique_id) {
    this.unique_id = unique_id;
    setUnique_idIsSet(true);
    return this;
  }

  public void unsetUnique_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIQUE_ID_ISSET_ID);
  }

  /** Returns true if field unique_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUnique_id() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIQUE_ID_ISSET_ID);
  }

  public void setUnique_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIQUE_ID_ISSET_ID, value);
  }

  public int getTripduration() {
    return this.tripduration;
  }

  public CitiBikeData setTripduration(int tripduration) {
    this.tripduration = tripduration;
    setTripdurationIsSet(true);
    return this;
  }

  public void unsetTripduration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIPDURATION_ISSET_ID);
  }

  /** Returns true if field tripduration is set (has been assigned a value) and false otherwise */
  public boolean isSetTripduration() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIPDURATION_ISSET_ID);
  }

  public void setTripdurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIPDURATION_ISSET_ID, value);
  }

  public String getStarttime() {
    return this.starttime;
  }

  public CitiBikeData setStarttime(String starttime) {
    this.starttime = starttime;
    return this;
  }

  public void unsetStarttime() {
    this.starttime = null;
  }

  /** Returns true if field starttime is set (has been assigned a value) and false otherwise */
  public boolean isSetStarttime() {
    return this.starttime != null;
  }

  public void setStarttimeIsSet(boolean value) {
    if (!value) {
      this.starttime = null;
    }
  }

  public String getStoptime() {
    return this.stoptime;
  }

  public CitiBikeData setStoptime(String stoptime) {
    this.stoptime = stoptime;
    return this;
  }

  public void unsetStoptime() {
    this.stoptime = null;
  }

  /** Returns true if field stoptime is set (has been assigned a value) and false otherwise */
  public boolean isSetStoptime() {
    return this.stoptime != null;
  }

  public void setStoptimeIsSet(boolean value) {
    if (!value) {
      this.stoptime = null;
    }
  }

  public int getStartstation() {
    return this.startstation;
  }

  public CitiBikeData setStartstation(int startstation) {
    this.startstation = startstation;
    setStartstationIsSet(true);
    return this;
  }

  public void unsetStartstation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTSTATION_ISSET_ID);
  }

  /** Returns true if field startstation is set (has been assigned a value) and false otherwise */
  public boolean isSetStartstation() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTSTATION_ISSET_ID);
  }

  public void setStartstationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTSTATION_ISSET_ID, value);
  }

  public String getStartstationname() {
    return this.startstationname;
  }

  public CitiBikeData setStartstationname(String startstationname) {
    this.startstationname = startstationname;
    return this;
  }

  public void unsetStartstationname() {
    this.startstationname = null;
  }

  /** Returns true if field startstationname is set (has been assigned a value) and false otherwise */
  public boolean isSetStartstationname() {
    return this.startstationname != null;
  }

  public void setStartstationnameIsSet(boolean value) {
    if (!value) {
      this.startstationname = null;
    }
  }

  public double getStartstationlat() {
    return this.startstationlat;
  }

  public CitiBikeData setStartstationlat(double startstationlat) {
    this.startstationlat = startstationlat;
    setStartstationlatIsSet(true);
    return this;
  }

  public void unsetStartstationlat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTSTATIONLAT_ISSET_ID);
  }

  /** Returns true if field startstationlat is set (has been assigned a value) and false otherwise */
  public boolean isSetStartstationlat() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTSTATIONLAT_ISSET_ID);
  }

  public void setStartstationlatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTSTATIONLAT_ISSET_ID, value);
  }

  public double getStartstationlong() {
    return this.startstationlong;
  }

  public CitiBikeData setStartstationlong(double startstationlong) {
    this.startstationlong = startstationlong;
    setStartstationlongIsSet(true);
    return this;
  }

  public void unsetStartstationlong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTSTATIONLONG_ISSET_ID);
  }

  /** Returns true if field startstationlong is set (has been assigned a value) and false otherwise */
  public boolean isSetStartstationlong() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTSTATIONLONG_ISSET_ID);
  }

  public void setStartstationlongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTSTATIONLONG_ISSET_ID, value);
  }

  public int getEndstation() {
    return this.endstation;
  }

  public CitiBikeData setEndstation(int endstation) {
    this.endstation = endstation;
    setEndstationIsSet(true);
    return this;
  }

  public void unsetEndstation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDSTATION_ISSET_ID);
  }

  /** Returns true if field endstation is set (has been assigned a value) and false otherwise */
  public boolean isSetEndstation() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDSTATION_ISSET_ID);
  }

  public void setEndstationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDSTATION_ISSET_ID, value);
  }

  public String getEndstationname() {
    return this.endstationname;
  }

  public CitiBikeData setEndstationname(String endstationname) {
    this.endstationname = endstationname;
    return this;
  }

  public void unsetEndstationname() {
    this.endstationname = null;
  }

  /** Returns true if field endstationname is set (has been assigned a value) and false otherwise */
  public boolean isSetEndstationname() {
    return this.endstationname != null;
  }

  public void setEndstationnameIsSet(boolean value) {
    if (!value) {
      this.endstationname = null;
    }
  }

  public double getEndstationlat() {
    return this.endstationlat;
  }

  public CitiBikeData setEndstationlat(double endstationlat) {
    this.endstationlat = endstationlat;
    setEndstationlatIsSet(true);
    return this;
  }

  public void unsetEndstationlat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDSTATIONLAT_ISSET_ID);
  }

  /** Returns true if field endstationlat is set (has been assigned a value) and false otherwise */
  public boolean isSetEndstationlat() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDSTATIONLAT_ISSET_ID);
  }

  public void setEndstationlatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDSTATIONLAT_ISSET_ID, value);
  }

  public double getEndstationlong() {
    return this.endstationlong;
  }

  public CitiBikeData setEndstationlong(double endstationlong) {
    this.endstationlong = endstationlong;
    setEndstationlongIsSet(true);
    return this;
  }

  public void unsetEndstationlong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDSTATIONLONG_ISSET_ID);
  }

  /** Returns true if field endstationlong is set (has been assigned a value) and false otherwise */
  public boolean isSetEndstationlong() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDSTATIONLONG_ISSET_ID);
  }

  public void setEndstationlongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDSTATIONLONG_ISSET_ID, value);
  }

  public int getBikeid() {
    return this.bikeid;
  }

  public CitiBikeData setBikeid(int bikeid) {
    this.bikeid = bikeid;
    setBikeidIsSet(true);
    return this;
  }

  public void unsetBikeid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIKEID_ISSET_ID);
  }

  /** Returns true if field bikeid is set (has been assigned a value) and false otherwise */
  public boolean isSetBikeid() {
    return EncodingUtils.testBit(__isset_bitfield, __BIKEID_ISSET_ID);
  }

  public void setBikeidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIKEID_ISSET_ID, value);
  }

  public String getUsertype() {
    return this.usertype;
  }

  public CitiBikeData setUsertype(String usertype) {
    this.usertype = usertype;
    return this;
  }

  public void unsetUsertype() {
    this.usertype = null;
  }

  /** Returns true if field usertype is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertype() {
    return this.usertype != null;
  }

  public void setUsertypeIsSet(boolean value) {
    if (!value) {
      this.usertype = null;
    }
  }

  public int getBirthyear() {
    return this.birthyear;
  }

  public CitiBikeData setBirthyear(int birthyear) {
    this.birthyear = birthyear;
    setBirthyearIsSet(true);
    return this;
  }

  public void unsetBirthyear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  /** Returns true if field birthyear is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthyear() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID);
  }

  public void setBirthyearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHYEAR_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public CitiBikeData setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIQUE_ID:
      if (value == null) {
        unsetUnique_id();
      } else {
        setUnique_id((Integer)value);
      }
      break;

    case TRIPDURATION:
      if (value == null) {
        unsetTripduration();
      } else {
        setTripduration((Integer)value);
      }
      break;

    case STARTTIME:
      if (value == null) {
        unsetStarttime();
      } else {
        setStarttime((String)value);
      }
      break;

    case STOPTIME:
      if (value == null) {
        unsetStoptime();
      } else {
        setStoptime((String)value);
      }
      break;

    case STARTSTATION:
      if (value == null) {
        unsetStartstation();
      } else {
        setStartstation((Integer)value);
      }
      break;

    case STARTSTATIONNAME:
      if (value == null) {
        unsetStartstationname();
      } else {
        setStartstationname((String)value);
      }
      break;

    case STARTSTATIONLAT:
      if (value == null) {
        unsetStartstationlat();
      } else {
        setStartstationlat((Double)value);
      }
      break;

    case STARTSTATIONLONG:
      if (value == null) {
        unsetStartstationlong();
      } else {
        setStartstationlong((Double)value);
      }
      break;

    case ENDSTATION:
      if (value == null) {
        unsetEndstation();
      } else {
        setEndstation((Integer)value);
      }
      break;

    case ENDSTATIONNAME:
      if (value == null) {
        unsetEndstationname();
      } else {
        setEndstationname((String)value);
      }
      break;

    case ENDSTATIONLAT:
      if (value == null) {
        unsetEndstationlat();
      } else {
        setEndstationlat((Double)value);
      }
      break;

    case ENDSTATIONLONG:
      if (value == null) {
        unsetEndstationlong();
      } else {
        setEndstationlong((Double)value);
      }
      break;

    case BIKEID:
      if (value == null) {
        unsetBikeid();
      } else {
        setBikeid((Integer)value);
      }
      break;

    case USERTYPE:
      if (value == null) {
        unsetUsertype();
      } else {
        setUsertype((String)value);
      }
      break;

    case BIRTHYEAR:
      if (value == null) {
        unsetBirthyear();
      } else {
        setBirthyear((Integer)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIQUE_ID:
      return Integer.valueOf(getUnique_id());

    case TRIPDURATION:
      return Integer.valueOf(getTripduration());

    case STARTTIME:
      return getStarttime();

    case STOPTIME:
      return getStoptime();

    case STARTSTATION:
      return Integer.valueOf(getStartstation());

    case STARTSTATIONNAME:
      return getStartstationname();

    case STARTSTATIONLAT:
      return Double.valueOf(getStartstationlat());

    case STARTSTATIONLONG:
      return Double.valueOf(getStartstationlong());

    case ENDSTATION:
      return Integer.valueOf(getEndstation());

    case ENDSTATIONNAME:
      return getEndstationname();

    case ENDSTATIONLAT:
      return Double.valueOf(getEndstationlat());

    case ENDSTATIONLONG:
      return Double.valueOf(getEndstationlong());

    case BIKEID:
      return Integer.valueOf(getBikeid());

    case USERTYPE:
      return getUsertype();

    case BIRTHYEAR:
      return Integer.valueOf(getBirthyear());

    case GENDER:
      return Integer.valueOf(getGender());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIQUE_ID:
      return isSetUnique_id();
    case TRIPDURATION:
      return isSetTripduration();
    case STARTTIME:
      return isSetStarttime();
    case STOPTIME:
      return isSetStoptime();
    case STARTSTATION:
      return isSetStartstation();
    case STARTSTATIONNAME:
      return isSetStartstationname();
    case STARTSTATIONLAT:
      return isSetStartstationlat();
    case STARTSTATIONLONG:
      return isSetStartstationlong();
    case ENDSTATION:
      return isSetEndstation();
    case ENDSTATIONNAME:
      return isSetEndstationname();
    case ENDSTATIONLAT:
      return isSetEndstationlat();
    case ENDSTATIONLONG:
      return isSetEndstationlong();
    case BIKEID:
      return isSetBikeid();
    case USERTYPE:
      return isSetUsertype();
    case BIRTHYEAR:
      return isSetBirthyear();
    case GENDER:
      return isSetGender();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CitiBikeData)
      return this.equals((CitiBikeData)that);
    return false;
  }

  public boolean equals(CitiBikeData that) {
    if (that == null)
      return false;

    boolean this_present_unique_id = true;
    boolean that_present_unique_id = true;
    if (this_present_unique_id || that_present_unique_id) {
      if (!(this_present_unique_id && that_present_unique_id))
        return false;
      if (this.unique_id != that.unique_id)
        return false;
    }

    boolean this_present_tripduration = true;
    boolean that_present_tripduration = true;
    if (this_present_tripduration || that_present_tripduration) {
      if (!(this_present_tripduration && that_present_tripduration))
        return false;
      if (this.tripduration != that.tripduration)
        return false;
    }

    boolean this_present_starttime = true && this.isSetStarttime();
    boolean that_present_starttime = true && that.isSetStarttime();
    if (this_present_starttime || that_present_starttime) {
      if (!(this_present_starttime && that_present_starttime))
        return false;
      if (!this.starttime.equals(that.starttime))
        return false;
    }

    boolean this_present_stoptime = true && this.isSetStoptime();
    boolean that_present_stoptime = true && that.isSetStoptime();
    if (this_present_stoptime || that_present_stoptime) {
      if (!(this_present_stoptime && that_present_stoptime))
        return false;
      if (!this.stoptime.equals(that.stoptime))
        return false;
    }

    boolean this_present_startstation = true;
    boolean that_present_startstation = true;
    if (this_present_startstation || that_present_startstation) {
      if (!(this_present_startstation && that_present_startstation))
        return false;
      if (this.startstation != that.startstation)
        return false;
    }

    boolean this_present_startstationname = true && this.isSetStartstationname();
    boolean that_present_startstationname = true && that.isSetStartstationname();
    if (this_present_startstationname || that_present_startstationname) {
      if (!(this_present_startstationname && that_present_startstationname))
        return false;
      if (!this.startstationname.equals(that.startstationname))
        return false;
    }

    boolean this_present_startstationlat = true;
    boolean that_present_startstationlat = true;
    if (this_present_startstationlat || that_present_startstationlat) {
      if (!(this_present_startstationlat && that_present_startstationlat))
        return false;
      if (this.startstationlat != that.startstationlat)
        return false;
    }

    boolean this_present_startstationlong = true;
    boolean that_present_startstationlong = true;
    if (this_present_startstationlong || that_present_startstationlong) {
      if (!(this_present_startstationlong && that_present_startstationlong))
        return false;
      if (this.startstationlong != that.startstationlong)
        return false;
    }

    boolean this_present_endstation = true;
    boolean that_present_endstation = true;
    if (this_present_endstation || that_present_endstation) {
      if (!(this_present_endstation && that_present_endstation))
        return false;
      if (this.endstation != that.endstation)
        return false;
    }

    boolean this_present_endstationname = true && this.isSetEndstationname();
    boolean that_present_endstationname = true && that.isSetEndstationname();
    if (this_present_endstationname || that_present_endstationname) {
      if (!(this_present_endstationname && that_present_endstationname))
        return false;
      if (!this.endstationname.equals(that.endstationname))
        return false;
    }

    boolean this_present_endstationlat = true;
    boolean that_present_endstationlat = true;
    if (this_present_endstationlat || that_present_endstationlat) {
      if (!(this_present_endstationlat && that_present_endstationlat))
        return false;
      if (this.endstationlat != that.endstationlat)
        return false;
    }

    boolean this_present_endstationlong = true;
    boolean that_present_endstationlong = true;
    if (this_present_endstationlong || that_present_endstationlong) {
      if (!(this_present_endstationlong && that_present_endstationlong))
        return false;
      if (this.endstationlong != that.endstationlong)
        return false;
    }

    boolean this_present_bikeid = true;
    boolean that_present_bikeid = true;
    if (this_present_bikeid || that_present_bikeid) {
      if (!(this_present_bikeid && that_present_bikeid))
        return false;
      if (this.bikeid != that.bikeid)
        return false;
    }

    boolean this_present_usertype = true && this.isSetUsertype();
    boolean that_present_usertype = true && that.isSetUsertype();
    if (this_present_usertype || that_present_usertype) {
      if (!(this_present_usertype && that_present_usertype))
        return false;
      if (!this.usertype.equals(that.usertype))
        return false;
    }

    boolean this_present_birthyear = true;
    boolean that_present_birthyear = true;
    if (this_present_birthyear || that_present_birthyear) {
      if (!(this_present_birthyear && that_present_birthyear))
        return false;
      if (this.birthyear != that.birthyear)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_unique_id = true;
    builder.append(present_unique_id);
    if (present_unique_id)
      builder.append(unique_id);

    boolean present_tripduration = true;
    builder.append(present_tripduration);
    if (present_tripduration)
      builder.append(tripduration);

    boolean present_starttime = true && (isSetStarttime());
    builder.append(present_starttime);
    if (present_starttime)
      builder.append(starttime);

    boolean present_stoptime = true && (isSetStoptime());
    builder.append(present_stoptime);
    if (present_stoptime)
      builder.append(stoptime);

    boolean present_startstation = true;
    builder.append(present_startstation);
    if (present_startstation)
      builder.append(startstation);

    boolean present_startstationname = true && (isSetStartstationname());
    builder.append(present_startstationname);
    if (present_startstationname)
      builder.append(startstationname);

    boolean present_startstationlat = true;
    builder.append(present_startstationlat);
    if (present_startstationlat)
      builder.append(startstationlat);

    boolean present_startstationlong = true;
    builder.append(present_startstationlong);
    if (present_startstationlong)
      builder.append(startstationlong);

    boolean present_endstation = true;
    builder.append(present_endstation);
    if (present_endstation)
      builder.append(endstation);

    boolean present_endstationname = true && (isSetEndstationname());
    builder.append(present_endstationname);
    if (present_endstationname)
      builder.append(endstationname);

    boolean present_endstationlat = true;
    builder.append(present_endstationlat);
    if (present_endstationlat)
      builder.append(endstationlat);

    boolean present_endstationlong = true;
    builder.append(present_endstationlong);
    if (present_endstationlong)
      builder.append(endstationlong);

    boolean present_bikeid = true;
    builder.append(present_bikeid);
    if (present_bikeid)
      builder.append(bikeid);

    boolean present_usertype = true && (isSetUsertype());
    builder.append(present_usertype);
    if (present_usertype)
      builder.append(usertype);

    boolean present_birthyear = true;
    builder.append(present_birthyear);
    if (present_birthyear)
      builder.append(birthyear);

    boolean present_gender = true;
    builder.append(present_gender);
    if (present_gender)
      builder.append(gender);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(CitiBikeData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnique_id()).compareTo(other.isSetUnique_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnique_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unique_id, other.unique_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTripduration()).compareTo(other.isSetTripduration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTripduration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tripduration, other.tripduration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarttime()).compareTo(other.isSetStarttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starttime, other.starttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoptime()).compareTo(other.isSetStoptime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoptime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stoptime, other.stoptime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartstation()).compareTo(other.isSetStartstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startstation, other.startstation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartstationname()).compareTo(other.isSetStartstationname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartstationname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startstationname, other.startstationname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartstationlat()).compareTo(other.isSetStartstationlat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartstationlat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startstationlat, other.startstationlat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartstationlong()).compareTo(other.isSetStartstationlong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartstationlong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startstationlong, other.startstationlong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndstation()).compareTo(other.isSetEndstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endstation, other.endstation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndstationname()).compareTo(other.isSetEndstationname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndstationname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endstationname, other.endstationname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndstationlat()).compareTo(other.isSetEndstationlat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndstationlat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endstationlat, other.endstationlat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndstationlong()).compareTo(other.isSetEndstationlong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndstationlong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endstationlong, other.endstationlong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBikeid()).compareTo(other.isSetBikeid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBikeid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bikeid, other.bikeid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertype()).compareTo(other.isSetUsertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertype, other.usertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthyear()).compareTo(other.isSetBirthyear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthyear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthyear, other.birthyear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CitiBikeData(");
    boolean first = true;

    sb.append("unique_id:");
    sb.append(this.unique_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tripduration:");
    sb.append(this.tripduration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starttime:");
    if (this.starttime == null) {
      sb.append("null");
    } else {
      sb.append(this.starttime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stoptime:");
    if (this.stoptime == null) {
      sb.append("null");
    } else {
      sb.append(this.stoptime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startstation:");
    sb.append(this.startstation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startstationname:");
    if (this.startstationname == null) {
      sb.append("null");
    } else {
      sb.append(this.startstationname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startstationlat:");
    sb.append(this.startstationlat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startstationlong:");
    sb.append(this.startstationlong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endstation:");
    sb.append(this.endstation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endstationname:");
    if (this.endstationname == null) {
      sb.append("null");
    } else {
      sb.append(this.endstationname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endstationlat:");
    sb.append(this.endstationlat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endstationlong:");
    sb.append(this.endstationlong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bikeid:");
    sb.append(this.bikeid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usertype:");
    if (this.usertype == null) {
      sb.append("null");
    } else {
      sb.append(this.usertype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthyear:");
    sb.append(this.birthyear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'unique_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tripduration' because it's a primitive and you chose the non-beans generator.
    if (starttime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'starttime' was not present! Struct: " + toString());
    }
    if (stoptime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stoptime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startstation' because it's a primitive and you chose the non-beans generator.
    if (startstationname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startstationname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'startstationlat' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startstationlong' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endstation' because it's a primitive and you chose the non-beans generator.
    if (endstationname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endstationname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'endstationlat' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endstationlong' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bikeid' because it's a primitive and you chose the non-beans generator.
    if (usertype == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'usertype' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'birthyear' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gender' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CitiBikeDataStandardSchemeFactory implements SchemeFactory {
    public CitiBikeDataStandardScheme getScheme() {
      return new CitiBikeDataStandardScheme();
    }
  }

  private static class CitiBikeDataStandardScheme extends StandardScheme<CitiBikeData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CitiBikeData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unique_id = iprot.readI32();
              struct.setUnique_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRIPDURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tripduration = iprot.readI32();
              struct.setTripdurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STARTTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.starttime = iprot.readString();
              struct.setStarttimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STOPTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stoptime = iprot.readString();
              struct.setStoptimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STARTSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startstation = iprot.readI32();
              struct.setStartstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STARTSTATIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startstationname = iprot.readString();
              struct.setStartstationnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STARTSTATIONLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startstationlat = iprot.readDouble();
              struct.setStartstationlatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STARTSTATIONLONG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.startstationlong = iprot.readDouble();
              struct.setStartstationlongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENDSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endstation = iprot.readI32();
              struct.setEndstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENDSTATIONNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endstationname = iprot.readString();
              struct.setEndstationnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENDSTATIONLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endstationlat = iprot.readDouble();
              struct.setEndstationlatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENDSTATIONLONG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.endstationlong = iprot.readDouble();
              struct.setEndstationlongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BIKEID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bikeid = iprot.readI32();
              struct.setBikeidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usertype = iprot.readString();
              struct.setUsertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BIRTHYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.birthyear = iprot.readI32();
              struct.setBirthyearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUnique_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'unique_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTripduration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tripduration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartstation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startstation' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartstationlat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startstationlat' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartstationlong()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startstationlong' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndstation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endstation' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndstationlat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endstationlat' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndstationlong()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endstationlong' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBikeid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bikeid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBirthyear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthyear' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGender()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gender' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CitiBikeData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UNIQUE_ID_FIELD_DESC);
      oprot.writeI32(struct.unique_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRIPDURATION_FIELD_DESC);
      oprot.writeI32(struct.tripduration);
      oprot.writeFieldEnd();
      if (struct.starttime != null) {
        oprot.writeFieldBegin(STARTTIME_FIELD_DESC);
        oprot.writeString(struct.starttime);
        oprot.writeFieldEnd();
      }
      if (struct.stoptime != null) {
        oprot.writeFieldBegin(STOPTIME_FIELD_DESC);
        oprot.writeString(struct.stoptime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTSTATION_FIELD_DESC);
      oprot.writeI32(struct.startstation);
      oprot.writeFieldEnd();
      if (struct.startstationname != null) {
        oprot.writeFieldBegin(STARTSTATIONNAME_FIELD_DESC);
        oprot.writeString(struct.startstationname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTSTATIONLAT_FIELD_DESC);
      oprot.writeDouble(struct.startstationlat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARTSTATIONLONG_FIELD_DESC);
      oprot.writeDouble(struct.startstationlong);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDSTATION_FIELD_DESC);
      oprot.writeI32(struct.endstation);
      oprot.writeFieldEnd();
      if (struct.endstationname != null) {
        oprot.writeFieldBegin(ENDSTATIONNAME_FIELD_DESC);
        oprot.writeString(struct.endstationname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENDSTATIONLAT_FIELD_DESC);
      oprot.writeDouble(struct.endstationlat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDSTATIONLONG_FIELD_DESC);
      oprot.writeDouble(struct.endstationlong);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BIKEID_FIELD_DESC);
      oprot.writeI32(struct.bikeid);
      oprot.writeFieldEnd();
      if (struct.usertype != null) {
        oprot.writeFieldBegin(USERTYPE_FIELD_DESC);
        oprot.writeString(struct.usertype);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIRTHYEAR_FIELD_DESC);
      oprot.writeI32(struct.birthyear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CitiBikeDataTupleSchemeFactory implements SchemeFactory {
    public CitiBikeDataTupleScheme getScheme() {
      return new CitiBikeDataTupleScheme();
    }
  }

  private static class CitiBikeDataTupleScheme extends TupleScheme<CitiBikeData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CitiBikeData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.unique_id);
      oprot.writeI32(struct.tripduration);
      oprot.writeString(struct.starttime);
      oprot.writeString(struct.stoptime);
      oprot.writeI32(struct.startstation);
      oprot.writeString(struct.startstationname);
      oprot.writeDouble(struct.startstationlat);
      oprot.writeDouble(struct.startstationlong);
      oprot.writeI32(struct.endstation);
      oprot.writeString(struct.endstationname);
      oprot.writeDouble(struct.endstationlat);
      oprot.writeDouble(struct.endstationlong);
      oprot.writeI32(struct.bikeid);
      oprot.writeString(struct.usertype);
      oprot.writeI32(struct.birthyear);
      oprot.writeI32(struct.gender);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CitiBikeData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.unique_id = iprot.readI32();
      struct.setUnique_idIsSet(true);
      struct.tripduration = iprot.readI32();
      struct.setTripdurationIsSet(true);
      struct.starttime = iprot.readString();
      struct.setStarttimeIsSet(true);
      struct.stoptime = iprot.readString();
      struct.setStoptimeIsSet(true);
      struct.startstation = iprot.readI32();
      struct.setStartstationIsSet(true);
      struct.startstationname = iprot.readString();
      struct.setStartstationnameIsSet(true);
      struct.startstationlat = iprot.readDouble();
      struct.setStartstationlatIsSet(true);
      struct.startstationlong = iprot.readDouble();
      struct.setStartstationlongIsSet(true);
      struct.endstation = iprot.readI32();
      struct.setEndstationIsSet(true);
      struct.endstationname = iprot.readString();
      struct.setEndstationnameIsSet(true);
      struct.endstationlat = iprot.readDouble();
      struct.setEndstationlatIsSet(true);
      struct.endstationlong = iprot.readDouble();
      struct.setEndstationlongIsSet(true);
      struct.bikeid = iprot.readI32();
      struct.setBikeidIsSet(true);
      struct.usertype = iprot.readString();
      struct.setUsertypeIsSet(true);
      struct.birthyear = iprot.readI32();
      struct.setBirthyearIsSet(true);
      struct.gender = iprot.readI32();
      struct.setGenderIsSet(true);
    }
  }

}

